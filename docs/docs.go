// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/login/telegram": {
            "post": {
                "description": "Создаёт или получает пользователя по Telegram ID и возвращает sessionID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Авторизация через Telegram",
                "parameters": [
                    {
                        "description": "Данные пользователя из Telegram",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http_auth.LoginTelegramReq"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http_auth.LoginTelegramRes"
                        }
                    },
                    "400": {
                        "description": "Некорректный запрос",
                        "schema": {
                            "$ref": "#/definitions/billsplitter-monolith_internal_utils_http.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error, но в debug моде возвращает детали ошибки",
                        "schema": {
                            "$ref": "#/definitions/billsplitter-monolith_internal_utils_http.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/auth/me": {
            "get": {
                "description": "Возвращает данные пользователя, извлечённые по sessionID из контекста",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "auth"
                ],
                "summary": "Получить данные текущего пользователя",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/internal_transport_http_auth.MeRes"
                        }
                    },
                    "400": {
                        "description": "Пользователь не найден или сессия невалидна",
                        "schema": {
                            "$ref": "#/definitions/billsplitter-monolith_internal_utils_http.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "billsplitter-monolith_internal_domain_auth.User": {
            "type": "object",
            "properties": {
                "extra": {
                    "$ref": "#/definitions/billsplitter-monolith_internal_domain_auth.UserExtra"
                },
                "firstName": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "billsplitter-monolith_internal_domain_auth.UserExtra": {
            "type": "object",
            "properties": {
                "telegram_id": {
                    "type": "integer"
                }
            }
        },
        "billsplitter-monolith_internal_utils_http.ErrorResponse": {
            "type": "object",
            "properties": {
                "errorMessage": {
                    "type": "string"
                }
            }
        },
        "internal_transport_http_auth.LoginTelegramReq": {
            "type": "object",
            "required": [
                "telegramID"
            ],
            "properties": {
                "firstName": {
                    "type": "string",
                    "example": "John"
                },
                "lastName": {
                    "type": "string",
                    "example": "Doe"
                },
                "telegramID": {
                    "type": "integer",
                    "example": 123456789
                },
                "username": {
                    "type": "string",
                    "example": "johndoe"
                }
            }
        },
        "internal_transport_http_auth.LoginTelegramRes": {
            "type": "object",
            "properties": {
                "sessionID": {
                    "type": "string",
                    "example": "b42b0a8e-0d1f-4c3d-939f-85fbbdc9be62"
                }
            }
        },
        "internal_transport_http_auth.MeRes": {
            "type": "object",
            "properties": {
                "user": {
                    "$ref": "#/definitions/billsplitter-monolith_internal_domain_auth.User"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:5001",
	BasePath:         "/",
	Schemes:          []string{"http"},
	Title:            "BillSplitter API",
	Description:      "API для Telegram Mini App по разделению счетов",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
